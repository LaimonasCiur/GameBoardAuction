@page "/addAuction"
@inject IJSRuntime JSRuntime
@inject IAuctionService AuctionService
@inject NavigationManager NavigationManager

<AuthorizeView>
    <Authorized Context="Auth">
        <div class="container d-flex justify-content-center text-center">
            <div class="card px-5 py-5">
                <h1>Add new Auction!</h1>
                <EditForm Model="@details" OnValidSubmit="@CreateAuction">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="row">
                        <div class="col-md-12">
                            <InputText id="name" @bind-Value="@details.Name" class="form-control" placeholder="What is the name of the Auction?"></InputText>
                        </div>
                    </div>
                    <div class="row p-3">
                        <div class="col-md-6">
                            <label for="buyNowPrice">Buy Now Price</label>
                            <InputNumber id="buyNowPrice" @bind-Value="@details.BuyNowPrice" class="form-control"></InputNumber>
                        </div>
                        <div class="col-md-6">
                            <label for="activeDate">Active Till</label>
                            <InputDate id="activeDate" @bind-Value="@details.ActiveDate" class="form-control"></InputDate>
                        </div>
                    </div>

                    <div class="row p-3">
                        <div class="col-md-6">
                            <label for="startingPrice">Starting Price</label>
                            <InputNumber id="startingPrice" @bind-Value="@details.StartingPrice" class="form-control"></InputNumber>
                        </div>
                        <div class="col-md-6">
                            <label for="minBidPrice">Minimum Bid Price</label>
                            <InputNumber id="minBidPrice" @bind-Value="@details.MinBidPrice" class="form-control"></InputNumber>
                        </div>
                    </div>

                    <div class="row mt-3">
                        <div class="col-md-12">
                            <span id="isValid" style="color:red"></span>
                            <label for="uploadFiles" class="btn btn-success">Select File(s)</label>
                            <InputFile id="uploadFiles" style="display:none;" multiple OnChange="HandleSelectedFile" />
                        </div>
                    </div>

                    @if (selectedFiles != null)
                    {
                        foreach (var file in selectedFiles)
                        {
                            var isLoading = file.Data.Position > 0;

                            <div class="file-row">
                                <div class="col-md-12">
                                    <p>@file.Name</p>
                                    Type: <strong>@file.Type</strong>
                                </div>
                            </div>
                        }
                    }

                    <div class="row mt-3">
                        <div class="col-md-12">
                            <InputTextArea id="desc" @bind-Value="@details.Description" class="form-control" placeholder="Please describe your product"></InputTextArea>
                        </div>
                    </div>
                    <button class="btn btn-success mt-5" type="submit"><i class="fa fa-long-arrow-right ml-2 mt-1"></i>Create New Auction!</button>
                </EditForm>
                <span id="valid" style="color:green"></span>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <h1>Only logged in user can create new auctions! Please login or register new account</h1>
    </NotAuthorized>
</AuthorizeView>


@code
{
    private AuctionDetails details = new AuctionDetails();

    private IFileListEntry[] selectedFiles;

    private async Task CreateAuction()
    {
        if (!details.IsValidDate())
        {
            await JSRuntime.InvokeVoidAsync("setElementTextById", "isValid", "Date is invalid!!!");
            return;
        }

        if (!details.IsValidPrice())
        {
            await JSRuntime.InvokeVoidAsync("setElementTextById", "isValid", "Buy now price cannot be lower than Starting price or Minimum Bid!!!");
            return;
        }

        await AuctionService.AddAuctionWithAttachments(details, selectedFiles);

        await JSRuntime.InvokeVoidAsync("setElementTextById", "valid", "Auction has been created!!!");
    }

    private async Task HandleSelectedFile(IFileListEntry[] files)
    {
        bool isValidFormat = files.Any(file => file.Type.Contains("js") || file.Type.Contains("exe"));

        if (!isValidFormat)
        {
            await JSRuntime.InvokeVoidAsync("setElementTextById", "isValid", "Provided file format is not acceptable!!!");
            return;
        }

        selectedFiles = files;
    }
}
